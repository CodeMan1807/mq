1、mq的应该用场景
    解耦
      提高代码的扩展性
    异步
      提高请求的执行效率
    流量消峰
      中和特定时间内访问量过大，访问量小的问题
2、mq的产品
  activemq
    万级吞吐量 对消息发送jms支持高， 社区维护少，不建议使用
  rabbitmq
    万级吞吐量 提供了对多中语言的支持 支持负载均衡，数据持久化
  kafka
    十万级吞吐量 对分布式架构结合比较好，高吞吐，高堆积
  socketmq
    阿里开发，技术新，文档缺乏
  redis
    针对数据量少的时候，入队和出队的效率都要高于mq，数据量大时入队的效率会低于mq
3、mq的事务
  amqp
    amqp协议自带事务，类似于mysql中的事务，包括开启，提交，回滚（效率比较低）
  comfirm
    在通道中提供序列号，与消息绑定到一起，分为三种方式
    单个确认
      通过通道发送给队列，保存的队列后，根据队列返回的信息确认是否放入到队列
    批量确认
      单个确认慢的时候，会用到批量确认，缺点（出现问题时，不知道哪一条出现的问题，整体返回没有发送到队列）
    异步确认
      在通道上设置一个监听器，发送到队列后，由监听器异步监听队列返回的插入到队列的信息（效率高，且可以异步对没有进队的数据进行处理）
4、mq的模型
  简单队列
    生产者 - 队列 - 消费者
  工作队列
    生产者 - 队列 - 多个消费者
      对于数据处理而言，数据进队需要的时间很短，但是消费者接受到消息后会进行业务处理，时间要远远超过入队的时间，这样就会造成队列中数据的积压，
    与此同时，就需要多个消费者对队列中的消息进行消费，就产生了工作队列
      队列发放消息到消费者的方式
        轮询
          队列将消息根据有多少个消费者，进行划分，每个消费者消费对等的数据量
        公平发放
          每个消费者的处理能力不同，按轮询的方式，可能造成一个消费者执行完处于空闲中，一个消费者还没有处理完数据，为了解决这个问题，便出现了公平发放
         的方式。这里需要限制每次队列放出多少条消息到消费者，消费者消费完之后，需要手动确认已经执行完毕，这样队列就会再给消费者分发任务
        总结，由上可以看出，轮询是用在自动应答上的，公平则是用于手动应答
  订阅/发布模式
    生产者 - 交换机 - 多个队列 - 消费者 
    交换机类型为 fanous 不处理路由键
    生产者将消费发送的交换机，交换机将消息放到每一个队列中供消费者使用
  路由模式
    生产者 - 交换机 - roudingKey - 队列 - 消费者   
    交换机类型 direct 处理路由键
    生产者将消息发送给交换机，交换机通过roudingkey找到对应的队列，放到队列里面供消费者使用
  主题模式
    生产者 - 交换机 - roudingKey通配符 - 队列 - 消费者
    交换机类型 topic
    举例：收集每个国家的新闻，天气，等信息，队列就可以分为收集某个国家所有信息的队列，收集全球信息的队列， 收集全球天气的队列让对应的消费者进行消费
  rpc模式
5、mq的应答机制
  消费者应答机制是为了保证消息到达消费者后，确定消费者已经消费了这个消息
  自动应答
  手动应答
  保证了消费者端不会丢失消息后，入队，出队，都能确定消息不丢失，但如果mq出现问题，数据一样会丢失，这就涉及到了数据的持久化，rabbitmq是支持数据持久化
  的，这样就可以保证即时mq挂了，重启mq后，信息还是存放在队列中供消费者消费
